[{
    "id": "a22ceab4a91f8127",
    "type": "tab",
    "label": "Flow 1",
    "disabled": false,
    "info": "",
    "env": []
}, {
    "id": "df051123bcec61aa",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "DIY Curtailment",
    "func": "// node.warn(\"Current DC Power:\" + msg.dc_power_now);\n\nif (msg.fit < 0) {\n    // node.warn(\"Negative FIT so not exporting - \" + msg.fit + \"c FIT\");\n    msg.decision = \"Curtailing exports\";\n    msg.decisions.push(msg.decision)\n    msg.curtailment_percentage = 100;\n    flow.set(\"curtailment\", 100);\n    return [msg, null, null]\n}\n// you can add your own logic if FIT is 0 here, if you wish\nelse if (msg.fit === 0) {\n    // node.warn(\"Zero FIT so exporting at half speed\");\n    msg.decision = \"Curtailing exports by 50% (0c FIT)\";\n    msg.decisions.push(msg.decision)\n    msg.curtailment_percentage = 50;\n    flow.set(\"curtailment\", 50);\n    return [null, msg, null]\n}\nelse {\n    // node.warn(\"Exporting ok - \" + msg.fit +\"c FIT\");\n    msg.decision = \"Exporting OK\";\n    msg.decisions.push(msg.decision)\n    msg.curtailment_percentage = 0;\n    flow.set(\"curtailment\", 0);\n    return [null, null, msg]\n}\n",
    "outputs": 3,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 900,
    "y": 140,
    "wires": [
        ["60d4ab772e17b253"],
        ["7ecd7165aa12452a"],
        ["5476e079e6a74d45"]
    ]
}, {
    "id": "90189bc94d399849",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Limit Export to Zero",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_number",
    "service": "set_value",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_number.set_sg_export_power_limit"],
    "data": "{\"value\":50}",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1540,
    "y": 60,
    "wires": [
        ["a9db63d1ef519e42"]
    ]
}, {
    "id": "6ee2c6f601e112ec",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Unlimited Export",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_number",
    "service": "set_value",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_number.set_sg_export_power_limit"],
    "data": "{ \"value\": 10000 }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1530,
    "y": 220,
    "wires": [
        ["a9db63d1ef519e42"]
    ]
}, {
    "id": "60d4ab772e17b253",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Enable Power Limit Mode",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_export_power_limit_mode"],
    "data": "{ \"option\": \"Enabled\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1230,
    "y": 60,
    "wires": [
        ["90189bc94d399849"]
    ]
}, {
    "id": "5476e079e6a74d45",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Disable Power Limit Mode",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_export_power_limit_mode"],
    "data": "{ \"option\": \"Enabled\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1240,
    "y": 220,
    "wires": [
        ["6ee2c6f601e112ec"]
    ]
}, {
    "id": "0a72e299af7c7376",
    "type": "catch",
    "z": "a22ceab4a91f8127",
    "name": "CatchAll",
    "scope": null,
    "uncaught": false,
    "x": 100,
    "y": 60,
    "wires": [
        ["db6ca994cc062914"]
    ]
}, {
    "id": "db6ca994cc062914",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Flow Errors",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 290,
    "y": 60,
    "wires": []
}, {
    "id": "6e03dc183ced7dd9",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug Curtailment",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 2490,
    "y": 140,
    "wires": []
}, {
    "id": "ac3bb2a884bdc5f7",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Charge/discharge/shutdown",
    "func": "let today = new Date();\n// node.warn(\"hour now is \" + today.getHours());\n// node.warn(msg.current + \" and battery \" + msg.battery);\n// node.warn(msg.net_remaining+\";\"+msg.charge_required)\n\n// less than or equal to 0 decisions\nif (msg.current <= 0) {\n    if (msg.battery <= 98) {\n        // node.warn(\"FREE ELECTRICITY and battery <= 98\");\n        msg.decision = \"Free electricity from grid, so fast charging\";\n        msg.decisions.push(msg.decision)\n        return [msg,null,null]\n    }\n    //shut down inverter\n    else if (msg.current < -.03 && msg.forecast < 0) {\n        // node.warn(\"Being paid more than 3c to use from grid, and forecast is negative too\");\n        msg.decision = \"Being paid more than 3c to use from grid, so shutting down inverter\";\n        msg.decisions.push(msg.decision)\n        return [null, null, msg]\n    }\n}\n//very cheap power decisions\nelse if (msg.current <= .04 && msg.battery < 75 && today.getHours() > 12) {\n    // node.warn(\"very cheap charging and battery low for afternoon\")\n    msg.decision = \"After 1pm, very cheap grid, battery low, so force-charging\";\n    msg.decisions.push(msg.decision)\n    return [msg, null, null]\n}\nelse if (msg.current <= .04 && msg.battery < 20 && today.getHours() < 8) {\n    // node.warn(\"very cheap charging and battery low for morning\")\n    msg.decision = \"Before 7am, very cheap grid, battery low, so force-charging\";\n    msg.decisions.push(msg.decision)\n    return [msg, null, null]\n}\nelse if (msg.current <= .14 && msg.battery < 90 && msg.net_remaining < 1 && today.getHours() > 6 && today.getHours() < 16) {\n    // node.warn(\"Little generation left and price is cheap so force charging\");\n    msg.decision = \"Between 7am and 4pm, cheap grid, battery low, low generation remaining, so force-charging\";\n    msg.decisions.push(msg.decision)\n    return [msg, null, null]\n}\nelse if (msg.current < .2 && msg.battery < 90 && msg.net_remaining < msg.charge_required && today.getHours() > 6) {\n    // node.warn(\"Not enough generation left to fully charge battery so force charging\");\n    msg.decision = \"After 7am, cheapish grid, battery below 90%, generation remaining not enough to charge battery, so force-charging\";\n    msg.decisions.push(msg.decision)\n    return [msg, null, null]\n}\n//\nelse {\n    // node.warn(\"Not worth charging battery from grid, not worth shutting down inverter\");\n    msg.decision = \"Not worth charging battery from grid, not worth shutting down inverter\";\n    msg.decisions.push(msg.decision)\n    return [null, msg, null]\n}\n",
    "outputs": 3,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 980,
    "y": 520,
    "wires": [
        ["3eb73ad8a6256630"],
        ["c18ecd577c5a16c4"],
        ["c91372affc87b424"]
    ]
}, {
    "id": "f3d318ab61343e35",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "EMS Forced Mode",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_ems_mode"],
    "data": "{ \"option\": \"Forced mode\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1450,
    "y": 460,
    "wires": [
        ["0b2d5f7146565059"]
    ]
}, {
    "id": "0b2d5f7146565059",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Force charge",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_battery_forced_charge_discharge_cmd"],
    "data": "{ \"option\": \"Forced charge\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1730,
    "y": 460,
    "wires": [
        ["3f27e54bd2cd6b8a"]
    ]
}, {
    "id": "60cdc0e41a150751",
    "type": "api-current-state",
    "z": "a22ceab4a91f8127",
    "name": "Get Battery Level",
    "server": "565eeeb7.e0f29",
    "version": 3,
    "outputs": 1,
    "halt_if": "",
    "halt_if_type": "str",
    "halt_if_compare": "is",
    "entity_id": "sensor.battery_level",
    "state_type": "num",
    "blockInputOverrides": false,
    "outputProperties": [{
        "property": "battery",
        "propertyType": "msg",
        "value": "",
        "valueType": "entityState"
    }],
    "for": "0",
    "forType": "num",
    "forUnits": "minutes",
    "override_topic": false,
    "state_location": "payload",
    "override_payload": "msg",
    "entity_location": "data",
    "override_data": "msg",
    "x": 590,
    "y": 520,
    "wires": [
        ["670772ed7eafee88"]
    ]
}, {
    "id": "18513f81aee52039",
    "type": "api-current-state",
    "z": "a22ceab4a91f8127",
    "name": "Get Forecast",
    "server": "565eeeb7.e0f29",
    "version": 3,
    "outputs": 1,
    "halt_if": "",
    "halt_if_type": "str",
    "halt_if_compare": "is",
    "entity_id": "sensor.capra_drive_general_forecast",
    "state_type": "num",
    "blockInputOverrides": false,
    "outputProperties": [{
        "property": "forecast",
        "propertyType": "msg",
        "value": "",
        "valueType": "entityState"
    }],
    "for": "0",
    "forType": "num",
    "forUnits": "minutes",
    "override_topic": false,
    "state_location": "payload",
    "override_payload": "msg",
    "entity_location": "data",
    "override_data": "msg",
    "x": 390,
    "y": 520,
    "wires": [
        ["60cdc0e41a150751"]
    ]
}, {
    "id": "65b234d730a3c595",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "EMS Self Consumption Mode",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_ems_mode"],
    "data": "{ \"option\": \"Self-consumption mode (default)\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1510,
    "y": 520,
    "wires": [
        ["369a67a217947f59"]
    ]
}, {
    "id": "369a67a217947f59",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Stop forced charge/discharge",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_battery_forced_charge_discharge_cmd"],
    "data": "{ \"option\": \"Stop (default)\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1810,
    "y": 520,
    "wires": [
        ["8351c005f1d56659"]
    ]
}, {
    "id": "9797a2c89819a60b",
    "type": "api-current-state",
    "z": "a22ceab4a91f8127",
    "name": "Get Import Price",
    "server": "565eeeb7.e0f29",
    "version": 3,
    "outputs": 1,
    "halt_if": "",
    "halt_if_type": "str",
    "halt_if_compare": "is",
    "entity_id": "sensor.capra_drive_general_price",
    "state_type": "num",
    "blockInputOverrides": false,
    "outputProperties": [{
        "property": "current",
        "propertyType": "msg",
        "value": "",
        "valueType": "entityState"
    }],
    "for": "0",
    "forType": "num",
    "forUnits": "minutes",
    "override_topic": false,
    "state_location": "payload",
    "override_payload": "msg",
    "entity_location": "data",
    "override_data": "msg",
    "x": 180,
    "y": 520,
    "wires": [
        ["18513f81aee52039"]
    ]
}, {
    "id": "faa21f5bb71f5d9f",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "EMS Forced Mode",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_ems_mode"],
    "data": "{ \"option\": \"Forced mode\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1210,
    "y": 300,
    "wires": [
        ["dfc82d97a2a1f6d0"]
    ]
}, {
    "id": "dfc82d97a2a1f6d0",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Force discharge",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_battery_forced_charge_discharge_cmd"],
    "data": "{ \"option\": \"Forced discharge\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1520,
    "y": 300,
    "wires": [
        ["286028299ea1d50b"]
    ]
}, {
    "id": "3797e378b35fe5fe",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Export from Battery?",
    "func": "msg.baseline_consumption = flow.get(\"baseline_consumption\");\n// node.warn(\"baseline consumption=\" + msg.baseline_consumption)\nif (msg.fit > .70 && msg.battery > 40) {\n    // node.warn(\"Extremely high FIT and spare capacity: \" + msg.fit);\n    msg.decision = \"Extremely high FIT and spare capacity, so forcing discharge\";\n    msg.decisions.push(msg.decision)\n    return [msg, null]\n}\nelse if (msg.fit >= .50 && msg.battery > 50) {\n    // node.warn(\"Very high FIT and spare capacity: \" + msg.fit);\n    msg.decision = \"Very high FIT and spare capacity, so forcing discharge\";\n    msg.decisions.push(msg.decision)\n    return [msg, null]\n}\nelse if (msg.fit >= .35 && msg.battery > 60) {\n    // node.warn(\"Great FIT and spare capacity: \" + msg.fit);\n    msg.decision = \"High FIT and spare capacity, so forcing discharge\";\n    msg.decisions.push(msg.decision)\n    return [msg, null]\n}\nelse if (msg.fit >= .3 && msg.battery > 70) {\n    // node.warn(\"Reasonable FIT and spare capacity: \"+msg.fit);\n    msg.decision = \"Moderate FIT and spare capacity, so forcing discharge\";\n    msg.decisions.push(msg.decision)\n    return [msg, null]\n}\nelse if (msg.fit >= .28 && msg.battery > 80) {\n    // node.warn(\"Tolerable FIT and spare capacity: \" + msg.fit);\n    msg.decision = \"Acceptable FIT and spare capacity, so forcing discharge\";\n    msg.decisions.push(msg.decision)\n    return [msg, null]\n}\nelse {\n    // node.warn(\"Not worth exporting from battery: \" + msg.fit);\n    msg.decision = \"Not worth exporting from battery\";\n    msg.decisions.push(msg.decision)\n    return [null,msg]\n}\n",
    "outputs": 2,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 920,
    "y": 340,
    "wires": [
        ["faa21f5bb71f5d9f"],
        ["8c78dca6dfd9e6ed"]
    ]
}, {
    "id": "a07ffdffda776f6d",
    "type": "api-current-state",
    "z": "a22ceab4a91f8127",
    "name": "Get Feed-in Price",
    "server": "565eeeb7.e0f29",
    "version": 3,
    "outputs": 1,
    "halt_if": "",
    "halt_if_type": "str",
    "halt_if_compare": "is",
    "entity_id": "sensor.amber_feed_in_price",
    "state_type": "num",
    "blockInputOverrides": false,
    "outputProperties": [{
        "property": "fit",
        "propertyType": "msg",
        "value": "",
        "valueType": "entityState"
    }],
    "for": "0",
    "forType": "num",
    "forUnits": "minutes",
    "override_topic": false,
    "state_location": "payload",
    "override_payload": "msg",
    "entity_location": "data",
    "override_data": "msg",
    "x": 190,
    "y": 220,
    "wires": [
        ["5da2b05fa907b853"]
    ]
}, {
    "id": "3816a3558f347c87",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "Run Every 10s",
    "props": [{
        "p": "payload"
    }, {
        "p": "topic",
        "vt": "str"
    }],
    "repeat": "10",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 140,
    "y": 140,
    "wires": [
        ["a07ffdffda776f6d"]
    ]
}, {
    "id": "6ae9621cfaa50cc7",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug Forced Discharge",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 2130,
    "y": 300,
    "wires": []
}, {
    "id": "5da2b05fa907b853",
    "type": "api-current-state",
    "z": "a22ceab4a91f8127",
    "name": "Get Battery Level",
    "server": "565eeeb7.e0f29",
    "version": 3,
    "outputs": 1,
    "halt_if": "",
    "halt_if_type": "str",
    "halt_if_compare": "is",
    "entity_id": "sensor.battery_level",
    "state_type": "num",
    "blockInputOverrides": false,
    "outputProperties": [{
        "property": "battery",
        "propertyType": "msg",
        "value": "",
        "valueType": "entityState"
    }],
    "for": "0",
    "forType": "num",
    "forUnits": "minutes",
    "override_topic": false,
    "state_location": "payload",
    "override_payload": "msg",
    "entity_location": "data",
    "override_data": "msg",
    "x": 270,
    "y": 300,
    "wires": [
        ["96f5b885e46e8a54"]
    ]
}, {
    "id": "f013b4d9f814a45a",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug Force Charge",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 2400,
    "y": 460,
    "wires": []
}, {
    "id": "286028299ea1d50b",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "4kw Discharge",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_number",
    "service": "set_value",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_number.set_sg_forced_charge_discharge_power"],
    "data": "{ \"value\": 4000 }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1840,
    "y": 300,
    "wires": [
        ["6ae9621cfaa50cc7", "8e740e78c6556459"]
    ]
}, {
    "id": "3f27e54bd2cd6b8a",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "8.5kW charge",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_number",
    "service": "set_value",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_number.set_sg_forced_charge_discharge_power"],
    "data": "{ \"value\": 8500 }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 2040,
    "y": 460,
    "wires": [
        ["f013b4d9f814a45a", "6696e787e3440d2c"]
    ]
}, {
    "id": "8351c005f1d56659",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "100W charge/discharge",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_number",
    "service": "set_value",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_number.set_sg_forced_charge_discharge_power"],
    "data": "{ \"value\": 100 }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 2090,
    "y": 520,
    "wires": [
        ["121128ea0ae5ef52"]
    ]
}, {
    "id": "d72093bc62a81885",
    "type": "rbe",
    "z": "a22ceab4a91f8127",
    "name": "RBE",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "septopics": true,
    "property": "fit",
    "topi": "battery",
    "x": 650,
    "y": 440,
    "wires": [
        ["e3e7484829cdcb70"]
    ]
}, {
    "id": "670772ed7eafee88",
    "type": "rbe",
    "z": "a22ceab4a91f8127",
    "name": "RBE",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "septopics": true,
    "property": "current",
    "topi": "battery",
    "x": 770,
    "y": 520,
    "wires": [
        ["ac3bb2a884bdc5f7"]
    ]
}, {
    "id": "a9db63d1ef519e42",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Slow battery charge?",
    "func": "\n\n// if FIT 0 or less, charge the battery at full speed\nif (msg.fit <= 0) {\n    // node.warn(\"No FIT benefit - \" + msg.fit + \"c - so charging at full speed\");\n    msg.decision = \"No feed-in benefit so charging at full speed\";\n    msg.decisions.push(msg.decision)\n    msg.battery_w = 8500;\n    return [msg, null]\n}\n// there is some feed in benefit, work out if worth slow-charging for\nelse if (msg.battery < 100 && msg.net_remaining < 1) {\n    // node.warn(\"FIT benefit - \" + msg.fit + \"c but less than 1kWh remaining generation so prioritising battery\");\n    msg.decision = \"Feed-in benefit but low generation remaining so charging at full speed\";\n    msg.decisions.push(msg.decision)\n    msg.battery_w = 8500;\n    return [null, msg]\n}\nelse if (msg.battery >= 30 && msg.net_remaining > msg.charge_required) {\n    // node.warn(\"FIT benefit - \" + msg.fit + \"c - so slow charging\");\n    msg.decision = \"Enough generation remaining so slow charging\";\n    msg.decisions.push(msg.decision)\n    msg.battery_w = 100;\n    return [null, msg]\n}\nelse if (msg.battery <= 15 && msg.net_remaining > msg.charge_required) {\n    // node.warn(\"FIT benefit but low battery - \" + msg.fit + \"c - so slow charging\");\n    msg.decision = \"Enough generation remaining but low battery so charging at 10% of PV\";\n    msg.decisions.push(msg.decision)\n    let slow_charge = Math.round((msg.dc_power_now * .1)/100) * 100;\n    msg.battery_w = slow_charge > 100 ? slow_charge : 100;\n    return [null, msg]\n}\n//if the battery is almost full, you can customise the logic here\nelse if (msg.battery > 95 && msg.expected_generation_remaining > msg.charge_required && msg.net_remaining > msg.charge_required) {\n    // node.warn(\"FIT benefit and battery almost full - \" + msg.fit + \"c - so slow charging\");\n    msg.decision = \"Enough generation remaining and battery almost full so charging at 10% of PV\";\n    msg.decisions.push(msg.decision)\n    let slow_charge = Math.round((msg.dc_power_now * .1)/100) * 100;\n    msg.battery_w = slow_charge > 100 ? slow_charge : 100;\n    return [null, msg]\n}\n//there is some feed-in benefti but we are favouring battery charging\nelse {\n    // node.warn(\"Else - \" + msg.fit + \"c - so fast charging\");\n    msg.decision = \"Feed-in benefit but fast charging anyway\";\n    msg.decisions.push(msg.decision)\n    return [msg, null]\n}\n",
    "outputs": 2,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1860,
    "y": 140,
    "wires": [
        ["8c2e115b98d19f22"],
        ["ae9fdc02f999322e"]
    ]
}, {
    "id": "ae9fdc02f999322e",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Slow charge",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_number",
    "service": "set_value",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_number.set_sg_battery_max_charge_power"],
    "data": "{\"value\": {{battery_w}} }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 2130,
    "y": 180,
    "wires": [
        ["6e03dc183ced7dd9", "347e0ae445145bab"]
    ]
}, {
    "id": "8c2e115b98d19f22",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Charge at max rate",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_number",
    "service": "set_value",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_number.set_sg_battery_max_charge_power"],
    "data": "{ \"value\": 8500 }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 2150,
    "y": 100,
    "wires": [
        ["6e03dc183ced7dd9", "347e0ae445145bab"]
    ]
}, {
    "id": "66c6bcbd97a0be96",
    "type": "http request",
    "z": "a22ceab4a91f8127",
    "name": "PV Forecast North",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.solcast.com.au/rooftop_sites/bf3e-73c5-82f4-e27f/forecasts?format=json",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "headers": [],
    "x": 390,
    "y": 940,
    "wires": [
        ["554dd7f75b4a026f"]
    ]
}, {
    "id": "ad80ce38e168d8a1",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "6am",
    "props": [{
        "p": "hour",
        "v": "6",
        "vt": "num"
    }],
    "repeat": "",
    "crontab": "00 06 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 110,
    "y": 920,
    "wires": [
        ["66c6bcbd97a0be96", "66d62d3aa77f720f"]
    ]
}, {
    "id": "593c075a4a95d705",
    "type": "file",
    "z": "a22ceab4a91f8127",
    "name": "",
    "filename": "filename",
    "filenameType": "msg",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "none",
    "x": 760,
    "y": 940,
    "wires": [
        ["fb1dcf6acc10ab18"]
    ]
}, {
    "id": "bb2da5eb568c754f",
    "type": "file",
    "z": "a22ceab4a91f8127",
    "name": "",
    "filename": "filename",
    "filenameType": "msg",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "none",
    "x": 760,
    "y": 1020,
    "wires": [
        ["de6c912ae391e5db"]
    ]
}, {
    "id": "66d62d3aa77f720f",
    "type": "http request",
    "z": "a22ceab4a91f8127",
    "name": "PV Forecast East",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.solcast.com.au/rooftop_sites/bba3-98e5-baa1-99a4/forecasts?format=json",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "headers": [],
    "x": 390,
    "y": 1020,
    "wires": [
        ["039237367225b0f7"]
    ]
}, {
    "id": "fb1dcf6acc10ab18",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug North Forecast",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 980,
    "y": 940,
    "wires": []
}, {
    "id": "de6c912ae391e5db",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug East Forecast",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 980,
    "y": 1020,
    "wires": []
}, {
    "id": "8ec56042b8217101",
    "type": "link in",
    "z": "a22ceab4a91f8127",
    "name": "Import Decider",
    "links": ["8c78dca6dfd9e6ed"],
    "x": 45,
    "y": 520,
    "wires": [
        ["9797a2c89819a60b"]
    ]
}, {
    "id": "8c78dca6dfd9e6ed",
    "type": "link out",
    "z": "a22ceab4a91f8127",
    "name": "decide on import",
    "mode": "link",
    "links": ["8ec56042b8217101"],
    "x": 1135,
    "y": 380,
    "wires": []
}, {
    "id": "1eb8193133df66fd",
    "type": "http request",
    "z": "a22ceab4a91f8127",
    "name": "PV Actuals North",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.solcast.com.au/rooftop_sites/bf3e-73c5-82f4-e27f/estimated_actuals?format=json",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "headers": [],
    "x": 390,
    "y": 1320,
    "wires": [
        ["4bcbe01c268203cf"]
    ]
}, {
    "id": "3c4a35a7a5190955",
    "type": "file",
    "z": "a22ceab4a91f8127",
    "name": "",
    "filename": "filename",
    "filenameType": "msg",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "none",
    "x": 760,
    "y": 1320,
    "wires": [
        ["6e2c681625a85775"]
    ]
}, {
    "id": "ff1ef747c4f8b3eb",
    "type": "file in",
    "z": "a22ceab4a91f8127",
    "name": "Read North",
    "filename": "filename",
    "filenameType": "msg",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "none",
    "allProps": false,
    "x": 510,
    "y": 1420,
    "wires": [
        ["8f3caefe2cca5837"]
    ]
}, {
    "id": "8f3caefe2cca5837",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Parse North",
    "func": "msg.north = JSON.parse(msg.payload);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 690,
    "y": 1420,
    "wires": [
        ["83639341510f4fb0"]
    ]
}, {
    "id": "a469a3859b9fe05b",
    "type": "file",
    "z": "a22ceab4a91f8127",
    "name": "",
    "filename": "filename",
    "filenameType": "msg",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "none",
    "x": 760,
    "y": 1360,
    "wires": [
        ["a3c0d768abaea7d0"]
    ]
}, {
    "id": "ca0e1a580e62664c",
    "type": "http request",
    "z": "a22ceab4a91f8127",
    "name": "PV Actuals East",
    "method": "GET",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.solcast.com.au/rooftop_sites/bba3-98e5-baa1-99a4/estimated_actuals?format=json",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "bearer",
    "senderr": false,
    "headers": [],
    "x": 380,
    "y": 1360,
    "wires": [
        ["323e72863cec9721"]
    ]
}, {
    "id": "56ee063ef5628cb3",
    "type": "file in",
    "z": "a22ceab4a91f8127",
    "name": "Read East",
    "filename": "filename",
    "filenameType": "msg",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "none",
    "allProps": false,
    "x": 1070,
    "y": 1420,
    "wires": [
        ["ed3b67ac474d3d41"]
    ]
}, {
    "id": "ed3b67ac474d3d41",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Parse and Add",
    "func": "msg.east = JSON.parse(msg.payload);\nmsg.totals = {}\nmsg.actual_today = 0;\nmsg.actual_by_hour = [];\nmsg.actual_yesterday = 0;\nmsg.actual_yesterday_by_hour = [];\nmsg.total_parts = [];\nmsg.forecast_periods = [];\n\nlet today = new Date();\nlet yesterday = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1);\nnode.warn(today);\nnode.warn(yesterday);\nlet max_items = Math.min(msg.east.estimated_actuals.length, msg.north.estimated_actuals.length);\nif (msg.east.estimated_actuals[0].period_end === msg.north.estimated_actuals[0].period_end) {\n    for (let i = 0; i < max_items; i++) {\n        let dp = msg.east.estimated_actuals[i].period_end.split(/\\D/);\n        let dateObj = new Date(Date.UTC(dp[0], dp[1]-1, dp[2], dp[3], dp[4], dp[5]));\n        let total = (msg.east.estimated_actuals[i].pv_estimate + msg.north.estimated_actuals[i].pv_estimate)/2;\n        if (today.getDate() === dateObj.getDate()) {\n            msg.actual_today += total;\n            if (msg.actual_by_hour[dateObj.getHours()]) {\n                msg.actual_by_hour[dateObj.getHours()] += total;\n            }\n            else {\n                msg.actual_by_hour[dateObj.getHours()] = total;\n            }\n            msg.total_parts.push(total);\n        }\n        if (yesterday.getDate() === dateObj.getDate()) {\n            msg.actual_yesterday += total;\n            if (msg.actual_yesterday_by_hour[dateObj.getHours()]) {\n                msg.actual_yesterday_by_hour[dateObj.getHours()] += total;\n            }\n            else {\n                msg.actual_yesterday_by_hour[dateObj.getHours()] = total;\n            }\n            msg.forecast_periods.push(total);\n        }\n        msg.totals[msg.east.estimated_actuals[i].period_end] = { total: total, date: dateObj };\n    }\n}\nelse {\n    node.error(\"files have different start times\", msg);\n}\nmsg.actual_yesterday = msg.actual_yesterday.toPrecision(3)\nmsg.actual_today = msg.actual_today.toPrecision(3)\nfor (let i = 0; i < msg.actual_yesterday_by_hour.length; i++) {\n    if (msg.actual_yesterday_by_hour[i] !== undefined) {\n        msg.actual_yesterday_by_hour[i] = msg.actual_yesterday_by_hour[i].toPrecision(2)\n    }\n}\nfor (let i = 0; i < msg.actual_by_hour.length; i++) {\n    if (msg.actual_by_hour[i] !== undefined) {\n        msg.actual_by_hour[i] = msg.actual_by_hour[i].toPrecision(2)\n    }\n}\nmsg.payload = {\n    \"actual_yesterday\": msg.actual_yesterday,\n    \"actual_yesterday_by_hour\": msg.actual_yesterday_by_hour,\n    \"actual_today\": msg.actual_today,\n    \"actual_by_hour\": msg.actual_by_hour,\n};\nmsg.filename = \"/config/node-red/solcast/capra-actuals-\" + msg.hour + \"-\" + today.getDate() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getFullYear() + \".json\"\n\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1260,
    "y": 1420,
    "wires": [
        ["4f58119a14cf397e"]
    ]
}, {
    "id": "7214013fe58ea15a",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug Writing Actuals",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1660,
    "y": 1420,
    "wires": []
}, {
    "id": "4bcbe01c268203cf",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Filename",
    "func": "let today = new Date();\nlet datestamp = today.getDate() + \"-\" + (today.getMonth()+1) + \"-\" + today.getFullYear();\nmsg.filename = \"/config/node-red/solcast/actuals/\"+datestamp+\"/north.json\"\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 1320,
    "wires": [
        ["3c4a35a7a5190955"]
    ]
}, {
    "id": "6e2c681625a85775",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug North Actuals",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 980,
    "y": 1320,
    "wires": []
}, {
    "id": "323e72863cec9721",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Filename",
    "func": "let today = new Date();\nlet datestamp = today.getDate() + \"-\" + (today.getMonth()+1) + \"-\" + today.getFullYear();\nmsg.filename = \"/config/node-red/solcast/actuals/\"+datestamp+\"/east.json\"\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 1360,
    "wires": [
        ["a469a3859b9fe05b"]
    ]
}, {
    "id": "a3c0d768abaea7d0",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug East Actuals",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 970,
    "y": 1360,
    "wires": []
}, {
    "id": "dd20b9d1e54afc21",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "North Filename",
    "func": "let today = new Date();\nmsg.filename = \"/config/node-red/solcast/capra-north-actuals-\" + today.getDate() + \"-\" + (today.getMonth()+1) + \"-\" + today.getFullYear() + \"-\" + msg.hour + \".json\"\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 320,
    "y": 1420,
    "wires": [
        ["ff1ef747c4f8b3eb"]
    ]
}, {
    "id": "83639341510f4fb0",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "East Filename",
    "func": "let today = new Date();\nmsg.filename = \"/config/node-red/solcast/capra-east-actuals-\" + today.getDate() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getFullYear() + \"-\" + msg.hour + \".json\"\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 880,
    "y": 1420,
    "wires": [
        ["56ee063ef5628cb3"]
    ]
}, {
    "id": "121128ea0ae5ef52",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Preserve Battery?",
    "func": "let today = new Date();\n// node.warn(\"hour now is \" + today.getHours());\n// node.warn(msg.current + \" and battery \" + msg.battery);\nif (today.getHours() >= 13) {\n    if (msg.current <= .05) {\n        // node.warn(\"After 2pm - preserving battery - grid cheaper than battery cycles\");\n        msg.decision = \"Preserving battery - grid cheaper than battery cycles\";\n        msg.decisions.push(msg.decision)\n        return [null, msg]\n    }\n    else {\n        msg.decision = \"After 1pm - but not worth preserving battery at current price\";\n        msg.decisions.push(msg.decision)\n        // node.warn(\"Not worth preserving battery\");\n        return [msg, null]\n    }\n}\nelse {\n    msg.decision = \"Before 1pm, not worth preserving battery\";\n    msg.decisions.push(msg.decision)\n    // node.warn(\"Not worth preserving battery\");\n    return [msg, null]\n}\n",
    "outputs": 2,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2370,
    "y": 520,
    "wires": [
        ["3dbbdf4736d43c3a"],
        ["8001451901b8e129"]
    ]
}, {
    "id": "8001451901b8e129",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Limit battery discharge",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_number",
    "service": "set_value",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_number.set_sg_battery_max_discharge_power"],
    "data": "{ \"value\": 100 }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 2680,
    "y": 560,
    "wires": [
        ["d6b8c6cfd7ded05f", "e144633243a2e77e"]
    ]
}, {
    "id": "3dbbdf4736d43c3a",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "No Limit on battery discharge",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_number",
    "service": "set_value",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_number.set_sg_battery_max_discharge_power"],
    "data": "{ \"value\": 8500 }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 2710,
    "y": 480,
    "wires": [
        ["d6b8c6cfd7ded05f", "e144633243a2e77e"]
    ]
}, {
    "id": "d6b8c6cfd7ded05f",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug Self-Consume",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 3060,
    "y": 520,
    "wires": []
}, {
    "id": "4f58119a14cf397e",
    "type": "file",
    "z": "a22ceab4a91f8127",
    "name": "Write actuals",
    "filename": "filename",
    "filenameType": "msg",
    "appendNewline": true,
    "createDir": false,
    "overwriteFile": "true",
    "encoding": "none",
    "x": 1450,
    "y": 1420,
    "wires": [
        ["7214013fe58ea15a"]
    ]
}, {
    "id": "e53cc381a12c2e2d",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Slower Export",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_number",
    "service": "set_value",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_number.set_sg_export_power_limit"],
    "data": "{ \"value\": 4000 }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1520,
    "y": 140,
    "wires": [
        ["a9db63d1ef519e42"]
    ]
}, {
    "id": "7ecd7165aa12452a",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Disable Power Limit Mode",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_export_power_limit_mode"],
    "data": "{ \"option\": \"Enabled\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1240,
    "y": 140,
    "wires": [
        ["e53cc381a12c2e2d"]
    ]
}, {
    "id": "d3e48bd37399e092",
    "type": "mqtt in",
    "z": "a22ceab4a91f8127",
    "name": "Get remaining kW",
    "topic": "remaining_kw",
    "qos": "2",
    "datatype": "auto-detect",
    "broker": "814a6af6675ecbdc",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 1570,
    "y": 1260,
    "wires": [
        ["50caad30ce2211ea"]
    ]
}, {
    "id": "50caad30ce2211ea",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug Forecast MQTT",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1820,
    "y": 1260,
    "wires": []
}, {
    "id": "96f5b885e46e8a54",
    "type": "api-current-state",
    "z": "a22ceab4a91f8127",
    "name": "Get Current Generation",
    "server": "565eeeb7.e0f29",
    "version": 3,
    "outputs": 1,
    "halt_if": "",
    "halt_if_type": "num",
    "halt_if_compare": "is",
    "entity_id": "sensor.total_dc_power",
    "state_type": "num",
    "blockInputOverrides": false,
    "outputProperties": [{
        "property": "dc_power_now",
        "propertyType": "msg",
        "value": "",
        "valueType": "entityState"
    }],
    "for": "0",
    "forType": "num",
    "forUnits": "minutes",
    "override_topic": false,
    "state_location": "payload",
    "override_payload": "msg",
    "entity_location": "data",
    "override_data": "msg",
    "x": 370,
    "y": 380,
    "wires": [
        ["5450ca7101e9a8f0"]
    ]
}, {
    "id": "5450ca7101e9a8f0",
    "type": "api-current-state",
    "z": "a22ceab4a91f8127",
    "name": "Get Current Load",
    "server": "565eeeb7.e0f29",
    "version": 3,
    "outputs": 1,
    "halt_if": "",
    "halt_if_type": "num",
    "halt_if_compare": "is",
    "entity_id": "sensor.load_power",
    "state_type": "num",
    "blockInputOverrides": false,
    "outputProperties": [{
        "property": "load_now",
        "propertyType": "msg",
        "value": "",
        "valueType": "entityState"
    }],
    "for": "0",
    "forType": "num",
    "forUnits": "minutes",
    "override_topic": false,
    "state_location": "payload",
    "override_payload": "msg",
    "entity_location": "data",
    "override_data": "msg",
    "x": 470,
    "y": 440,
    "wires": [
        ["d72093bc62a81885"]
    ]
}, {
    "id": "b82df6bc1d62a533",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "12pm",
    "props": [{
        "p": "hour",
        "v": "12",
        "vt": "num"
    }],
    "repeat": "",
    "crontab": "00 12 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 110,
    "y": 1000,
    "wires": [
        ["66c6bcbd97a0be96", "66d62d3aa77f720f"]
    ]
}, {
    "id": "333b02da7200f559",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "9pm",
    "props": [{
        "p": "hour",
        "v": "21",
        "vt": "num"
    }],
    "repeat": "",
    "crontab": "00 21 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 110,
    "y": 1340,
    "wires": [
        ["1eb8193133df66fd", "ca0e1a580e62664c"]
    ]
}, {
    "id": "fc8b3e91b1b2b926",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "6am",
    "props": [{
        "p": "hour",
        "v": "6",
        "vt": "num"
    }],
    "repeat": "",
    "crontab": "02 06 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 110,
    "y": 1400,
    "wires": [
        ["dd20b9d1e54afc21"]
    ]
}, {
    "id": "f74d3457ea62467c",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "12pm",
    "props": [{
        "p": "hour",
        "v": "12",
        "vt": "num"
    }],
    "repeat": "",
    "crontab": "02 12 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 110,
    "y": 1440,
    "wires": [
        ["dd20b9d1e54afc21"]
    ]
}, {
    "id": "82aa630ccd6bf338",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "6am",
    "props": [{
        "p": "hour",
        "v": "6",
        "vt": "num"
    }],
    "repeat": "",
    "crontab": "02 06 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 110,
    "y": 1080,
    "wires": [
        ["9bcdc5cf7e1f05b3"]
    ]
}, {
    "id": "37ac5ad2e7a5456a",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "12pm",
    "props": [{
        "p": "hour",
        "v": "12",
        "vt": "num"
    }],
    "repeat": "",
    "crontab": "02 12 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 110,
    "y": 1160,
    "wires": [
        ["9bcdc5cf7e1f05b3"]
    ]
}, {
    "id": "43904b806a4ce947",
    "type": "file in",
    "z": "a22ceab4a91f8127",
    "name": "Get baseline consumption",
    "filename": "/config/node-red/reference/baseline-consumption.csv",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "none",
    "allProps": false,
    "x": 460,
    "y": 780,
    "wires": [
        ["6afd64caada57266"]
    ]
}, {
    "id": "6afd64caada57266",
    "type": "csv",
    "z": "a22ceab4a91f8127",
    "name": "",
    "sep": "\\t",
    "hdrin": "",
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 670,
    "y": 780,
    "wires": [
        ["6eb13553c6cb7388"]
    ]
}, {
    "id": "eb616401a350cf12",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug Load Consumption",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1080,
    "y": 780,
    "wires": []
}, {
    "id": "32a39e201c1b859c",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "Get Baseline Consumption",
    "props": [{
        "p": "payload"
    }, {
        "p": "topic",
        "vt": "str"
    }],
    "repeat": "3600",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 180,
    "y": 780,
    "wires": [
        ["43904b806a4ce947"]
    ]
}, {
    "id": "6eb13553c6cb7388",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Convert to Obj",
    "func": "let obj = {};\nfor (let i=0; i<msg.payload.length; i++) {\n    obj[\"\"+msg.payload[i].col1] = msg.payload[i].col2;\n}\nmsg.payload = obj;\nflow.set(\"baseline_consumption\", obj);\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 840,
    "y": 780,
    "wires": [
        ["eb616401a350cf12"]
    ]
}, {
    "id": "3336caf3bd2ed74c",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "9am",
    "props": [{
        "p": "hour",
        "v": "9",
        "vt": "num"
    }],
    "repeat": "",
    "crontab": "00 06 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 110,
    "y": 960,
    "wires": [
        ["66c6bcbd97a0be96", "66d62d3aa77f720f"]
    ]
}, {
    "id": "12dbb6285d8f8ca0",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "3pm",
    "props": [{
        "p": "hour",
        "v": "15",
        "vt": "num"
    }],
    "repeat": "",
    "crontab": "00 15 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 110,
    "y": 1040,
    "wires": [
        ["66c6bcbd97a0be96", "66d62d3aa77f720f"]
    ]
}, {
    "id": "caec791351315bf0",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "9am",
    "props": [{
        "p": "hour",
        "v": "9",
        "vt": "num"
    }],
    "repeat": "",
    "crontab": "02 09 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 110,
    "y": 1120,
    "wires": [
        ["9bcdc5cf7e1f05b3"]
    ]
}, {
    "id": "8a9abaeab0fbe840",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "3pm",
    "props": [{
        "p": "hour",
        "v": "15",
        "vt": "num"
    }],
    "repeat": "",
    "crontab": "02 15 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 110,
    "y": 1200,
    "wires": [
        ["9bcdc5cf7e1f05b3"]
    ]
}, {
    "id": "554dd7f75b4a026f",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Filename",
    "func": "let today = new Date();\nlet datestamp = today.getDate() + \"-\" + (today.getMonth()+1) + \"-\" + today.getFullYear();\nmsg.filename = \"/config/node-red/solcast/data/\"+datestamp+\"/\" + msg.hour + \"-north.json\"\nreturn msg;\n",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 940,
    "wires": [
        ["593c075a4a95d705"]
    ]
}, {
    "id": "039237367225b0f7",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Filename",
    "func": "let today = new Date();\nlet datestamp = today.getDate() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getFullYear();\nmsg.filename = \"/config/node-red/solcast/data/\"+datestamp+\"/\" + msg.hour + \"-east.json\"\nreturn msg;\n",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 1020,
    "wires": [
        ["bb2da5eb568c754f"]
    ]
}, {
    "id": "9bcdc5cf7e1f05b3",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "North Filename",
    "func": "let today = new Date();\nmsg.datestamp = today.getDate() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getFullYear();\n//regenerate all files for today\nlet hours = [6,9,12,15];\nfor (let i=0; i<hours.length; i++) {\n    if (hours[i] <= today.getHours()) { //file should exist\n        msg.hour = hours[i];\n        msg.filename = \"/config/node-red/solcast/data/\"+msg.datestamp+\"/\" + msg.hour + \"-north.json\";\n        node.send(msg); \n    }\n    else {\n        // node.warn(\"skipping hour as not there yet: \"+hours[i])\n        // node.send([null,msg])\n    }\n}\n",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 1140,
    "wires": [
        ["588ef90629e40ac9"]
    ]
}, {
    "id": "588ef90629e40ac9",
    "type": "file in",
    "z": "a22ceab4a91f8127",
    "name": "Read North",
    "filename": "filename",
    "filenameType": "msg",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "none",
    "allProps": false,
    "x": 570,
    "y": 1140,
    "wires": [
        ["b6ee99e90437fcd4"]
    ]
}, {
    "id": "b6ee99e90437fcd4",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Parse North",
    "func": "msg.north = JSON.parse(msg.payload);\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 750,
    "y": 1140,
    "wires": [
        ["85a14f95f38e5920"]
    ]
}, {
    "id": "85a14f95f38e5920",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "East Filename",
    "func": "msg.filename = \"/config/node-red/solcast/data/\"+msg.datestamp+\"/\" + msg.hour + \"-east.json\";\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 940,
    "y": 1140,
    "wires": [
        ["de7a4dc9e21db693"]
    ]
}, {
    "id": "de7a4dc9e21db693",
    "type": "file in",
    "z": "a22ceab4a91f8127",
    "name": "Read East",
    "filename": "filename",
    "filenameType": "msg",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "none",
    "allProps": false,
    "x": 1130,
    "y": 1140,
    "wires": [
        ["b0955ff974dcf5f2"]
    ]
}, {
    "id": "b0955ff974dcf5f2",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Parse and Add",
    "func": "msg.east = JSON.parse(msg.payload);\nmsg.totals = {}\nmsg.remaining_today = 0;\nmsg.remaining_by_hour = [];\nmsg.forecast_tomorrow = 0;\nmsg.forecast_tomorrow_by_hour = [];\nmsg.total_parts = [];\nmsg.forecast_periods = [];\nlet today = new Date();\nlet datestamp = today.getDate() + \"-\" + (today.getMonth()+1) + \"-\" + today.getFullYear();\nlet tomorrow = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n// node.warn(today);\n// node.warn(tomorrow);\nlet max_items = Math.min(msg.east.forecasts.length, msg.north.forecasts.length);\nif (msg.east.forecasts[0].period_end === msg.north.forecasts[0].period_end) {\n    for (let i = 0; i < max_items; i++) {\n        let dp = msg.east.forecasts[i].period_end.split(/\\D/);\n        let dateObj = new Date(Date.UTC(dp[0], dp[1]-1, dp[2], dp[3], dp[4], dp[5]));\n        //set time back half an hour so the time is period start not end\n        dateObj.setTime(dateObj.getTime()-(30*60*1000))\n        let pv_estimate_east = (msg.east.forecasts[i].pv_estimate10 + msg.east.forecasts[i].pv_estimate90) / 2;\n        let pv_estimate_north = (msg.north.forecasts[i].pv_estimate10 + msg.north.forecasts[i].pv_estimate90) / 2;\n        let total = (pv_estimate_east + pv_estimate_north)/2;\n        if (today.getDate() === dateObj.getDate()) {\n            msg.remaining_today += total;\n            if (msg.remaining_by_hour[dateObj.getHours()]) {\n                msg.remaining_by_hour[dateObj.getHours()] += total;\n            }\n            else {\n                msg.remaining_by_hour[dateObj.getHours()] = total;\n            }\n            msg.total_parts.push(total);\n        }\n        if (tomorrow.getDate() === dateObj.getDate()) {\n            msg.forecast_tomorrow += total;\n            if (msg.forecast_tomorrow_by_hour[dateObj.getHours()]) {\n                msg.forecast_tomorrow_by_hour[dateObj.getHours()] += total;\n            }\n            else {\n                msg.forecast_tomorrow_by_hour[dateObj.getHours()] = total;\n            }\n            msg.forecast_periods.push(total);\n        }\n        msg.totals[msg.east.forecasts[i].period_end] = { total: total, date: dateObj };\n    }\n}\nelse {\n    node.error(\"files have different start times\", msg);\n}\nmsg.remaining_today = msg.remaining_today.toPrecision(3)\nmsg.forecast_tomorrow = msg.forecast_tomorrow.toPrecision(3)\nfor (let i = 0; i < msg.remaining_by_hour.length; i++) {\n    if (msg.remaining_by_hour[i] !== undefined) {\n        msg.remaining_by_hour[i] = msg.remaining_by_hour[i].toPrecision(2)\n    }\n}\nfor (let i = 0; i < msg.forecast_tomorrow_by_hour.length; i++) {\n    if (msg.forecast_tomorrow_by_hour[i] !== undefined) {\n        msg.forecast_tomorrow_by_hour[i] = msg.forecast_tomorrow_by_hour[i].toPrecision(2)\n    }\n}\nflow.set(\"remaining_today\", msg.remaining_by_hour);\nmsg.payload = {\n    \"forecast_today\": msg.remaining_today,\n    \"forecast_by_hour\": msg.remaining_by_hour,\n    \"forecast_tomorrow\": msg.forecast_tomorrow,\n    \"forecast_tomorrow_by_hour\": msg.forecast_tomorrow_by_hour\n};\nmsg.filename = \"/config/node-red/solcast/forecasts/\"+datestamp+\"/\" + msg.hour + \".json\"\nreturn msg;",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1320,
    "y": 1140,
    "wires": [
        ["1f55f226b805f77c", "e4a451be4a841b52"]
    ]
}, {
    "id": "1f55f226b805f77c",
    "type": "file",
    "z": "a22ceab4a91f8127",
    "name": "Write forecast",
    "filename": "filename",
    "filenameType": "msg",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "none",
    "x": 1560,
    "y": 1140,
    "wires": [
        ["ea754940fa1af36f"]
    ]
}, {
    "id": "e4a451be4a841b52",
    "type": "mqtt out",
    "z": "a22ceab4a91f8127",
    "name": "Send Remaining kW",
    "topic": "remaining_kw",
    "qos": "1",
    "retain": "false",
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "814a6af6675ecbdc",
    "x": 1580,
    "y": 1200,
    "wires": []
}, {
    "id": "ea754940fa1af36f",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug Writing Forecast",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1790,
    "y": 1140,
    "wires": []
}, {
    "id": "6969f1db5a012e0d",
    "type": "api-current-state",
    "z": "a22ceab4a91f8127",
    "name": "Generation History",
    "server": "565eeeb7.e0f29",
    "version": 3,
    "outputs": 1,
    "halt_if": "",
    "halt_if_type": "num",
    "halt_if_compare": "is",
    "entity_id": "sensor.daily_pv_generation",
    "state_type": "str",
    "blockInputOverrides": false,
    "outputProperties": [{
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "entityState"
    }, {
        "property": "data",
        "propertyType": "msg",
        "value": "",
        "valueType": "entity"
    }],
    "for": "0",
    "forType": "num",
    "forUnits": "minutes",
    "override_topic": false,
    "state_location": "payload",
    "override_payload": "msg",
    "entity_location": "data",
    "override_data": "msg",
    "x": 370,
    "y": 680,
    "wires": [
        ["acf3dbf510dc5df6"]
    ]
}, {
    "id": "27a880493ef7ecbb",
    "type": "inject",
    "z": "a22ceab4a91f8127",
    "name": "Check Generation",
    "props": [{
        "p": "payload"
    }, {
        "p": "topic",
        "vt": "str"
    }],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 680,
    "wires": [
        ["6969f1db5a012e0d"]
    ]
}, {
    "id": "3944ea61641c9351",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug PV Generation Logging",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1170,
    "y": 680,
    "wires": []
}, {
    "id": "0a40e0832cf7db69",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Append to today file",
    "func": "let now = new Date();\nlet timestamp = now.getHours().toString().padStart(2, '0') + \":\" + now.getMinutes().toString().padStart(2, '0');\nlet datestamp = now.getDate().toString().padStart(2, '0') + \"-\" + (now.getMonth()+1).toString().padStart(2, '0') + \"-\" + now.getFullYear();\n\nmsg.filename = \"/config/node-red/solcast/generation/\"+datestamp+\".csv\";\nmsg.payload = timestamp + \",\" + msg.payload+\",\"+flow.get(\"curtailment\");\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 740,
    "y": 680,
    "wires": [
        ["886e8141b772b80a"]
    ]
}, {
    "id": "886e8141b772b80a",
    "type": "file",
    "z": "a22ceab4a91f8127",
    "name": "",
    "filename": "filename",
    "filenameType": "msg",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "none",
    "x": 940,
    "y": 680,
    "wires": [
        ["3944ea61641c9351"]
    ]
}, {
    "id": "acf3dbf510dc5df6",
    "type": "rbe",
    "z": "a22ceab4a91f8127",
    "name": "RBE",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "septopics": false,
    "property": "payload",
    "topi": "topic",
    "x": 550,
    "y": 680,
    "wires": [
        ["0a40e0832cf7db69"]
    ]
}, {
    "id": "c91372affc87b424",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Shutdown Inverter",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_inverter_run_mode"],
    "data": "{ \"option\": \"Shutdown\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1250,
    "y": 580,
    "wires": [
        ["16a590ce87ef12c1"]
    ]
}, {
    "id": "3eb73ad8a6256630",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Enable Inverter",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_inverter_run_mode"],
    "data": "{ \"option\": \"Enabled\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1240,
    "y": 460,
    "wires": [
        ["f3d318ab61343e35"]
    ]
}, {
    "id": "c18ecd577c5a16c4",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Enable Inverter",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_inverter_run_mode"],
    "data": "{ \"option\": \"Enabled\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1240,
    "y": 520,
    "wires": [
        ["65b234d730a3c595"]
    ]
}, {
    "id": "c0c9f79472130360",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug Shutdown",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 2430,
    "y": 580,
    "wires": []
}, {
    "id": "16a590ce87ef12c1",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "EMS Self Consumption Mode",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_ems_mode"],
    "data": "{ \"option\": \"Self-consumption mode (default)\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1670,
    "y": 580,
    "wires": [
        ["8dd1b9d80eb0747d"]
    ]
}, {
    "id": "8dd1b9d80eb0747d",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "Stop forced charge/discharge",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_select",
    "service": "select_option",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_select.set_sg_battery_forced_charge_discharge_cmd"],
    "data": "{ \"option\": \"Stop (default)\" }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 1970,
    "y": 580,
    "wires": [
        ["03316701b31c3b7b"]
    ]
}, {
    "id": "03316701b31c3b7b",
    "type": "api-call-service",
    "z": "a22ceab4a91f8127",
    "name": "8.5kW charge",
    "server": "565eeeb7.e0f29",
    "version": 5,
    "debugenabled": false,
    "domain": "input_number",
    "service": "set_value",
    "areaId": [],
    "deviceId": [],
    "entityId": ["input_number.set_sg_forced_charge_discharge_power"],
    "data": "{ \"value\": 8500 }",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 2220,
    "y": 580,
    "wires": [
        ["c0c9f79472130360", "d6458d1b41a84321"]
    ]
}, {
    "id": "74e9fcaeb927bc30",
    "type": "comment",
    "z": "a22ceab4a91f8127",
    "name": "Reset the EMS",
    "info": "",
    "x": 1440,
    "y": 580,
    "wires": []
}, {
    "id": "10bc27b0d668bf2f",
    "type": "comment",
    "z": "a22ceab4a91f8127",
    "name": "Get Solcast forecasts",
    "info": "",
    "x": 140,
    "y": 860,
    "wires": []
}, {
    "id": "9d58194b508a3f76",
    "type": "comment",
    "z": "a22ceab4a91f8127",
    "name": "Get Solcast actuals",
    "info": "",
    "x": 130,
    "y": 1280,
    "wires": []
}, {
    "id": "116d96141ab77b4b",
    "type": "comment",
    "z": "a22ceab4a91f8127",
    "name": "Log PV Generation",
    "info": "",
    "x": 130,
    "y": 640,
    "wires": []
}, {
    "id": "efdbdac0020f9bab",
    "type": "comment",
    "z": "a22ceab4a91f8127",
    "name": "Load Expected Consumption",
    "info": "",
    "x": 160,
    "y": 740,
    "wires": []
}, {
    "id": "e3e7484829cdcb70",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Calculate Inputs",
    "func": "let remaining_generation = flow.get(\"remaining_today\");\nlet baseline_consumption = flow.get(\"baseline_consumption\");\nlet today = new Date();\nlet current_hour = today.getHours();\nmsg.decisions = []\nmsg.expected_consumption_remaining = 0;\nmsg.expected_generation_remaining = 0;\nlet consumption_minus_generating_remaining = 0;\nfor (let hour in baseline_consumption) {\n    if (Number(hour) >= current_hour) {\n        let consumption_this_hour = (baseline_consumption[hour]/1000);\n        msg.expected_consumption_remaining += consumption_this_hour;\n        if (remaining_generation[hour]) {\n            msg.expected_generation_remaining += Number(remaining_generation[hour]);\n            consumption_minus_generating_remaining += Number(remaining_generation[hour]) - consumption_this_hour;\n        }\n    }\n}\n// node.warn(`baseline consumption remaining ${msg.expected_consumption_remaining.toPrecision(2)}kWh`);\n// node.warn(`generation remaining ${msg.expected_generation_remaining.toPrecision(2)}kWh`)\nmsg.net_remaining = (msg.expected_generation_remaining - msg.expected_consumption_remaining);\n// node.warn(`generation - consumption estimate ${msg.net_remaining.toPrecision(2)}kWh`);\nmsg.remaining_battery_kwh = (msg.battery/100) * 12.8;\n// node.warn(`battery remaining ${msg.remaining_battery_kwh.toPrecision(3)}kWh`);\nmsg.charge_required = 12.8 - msg.remaining_battery_kwh;\n// node.warn(`battery deficit ${msg.charge_required.toPrecision(3)}kWh`);\n// node.warn(`Net generation minus consumption: ${consumption_minus_generating_remaining.toPrecision(2)}kWh`);\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 640,
    "y": 240,
    "wires": [
        ["df051123bcec61aa", "3797e378b35fe5fe"]
    ]
}, {
    "id": "48647c2c6d79945d",
    "type": "debug",
    "z": "a22ceab4a91f8127",
    "name": "Debug Decision Logging",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 3090,
    "y": 380,
    "wires": []
}, {
    "id": "32d8aee4fa4fa0c0",
    "type": "function",
    "z": "a22ceab4a91f8127",
    "name": "Append to decision log",
    "func": "let now = new Date();\nlet timestamp = now.getHours().toString().padStart(2, '0') + \":\" + now.getMinutes().toString().padStart(2, '0');\nlet datestamp = now.getDate().toString().padStart(2, '0') + \"-\" + (now.getMonth()+1).toString().padStart(2, '0') + \"-\" + now.getFullYear();\n\nmsg.filename = \"/config/node-red/decision_logs/\"+datestamp+\".csv\";\n\nlet data = [timestamp];\nif (msg.battery_w) {\n    data.push(\"Curtailment\")\n}\nelse {\n    data.push(\"Other\")\n} \ndata.push(msg.fit)\ndata.push(msg.curtailment_percentage)\ndata.push(msg.current)\ndata.push(msg.forecast)\ndata.push(msg.dc_power_now)\ndata.push(msg.load_now)\ndata.push(msg.expected_generation_remaining.toPrecision(4))\ndata.push(msg.expected_consumption_remaining.toPrecision(4))\ndata.push(msg.battery)\ndata.push(msg.net_remaining.toPrecision(4))\ndata.push(msg.remaining_battery_kwh.toPrecision(4))\ndata.push(msg.charge_required.toPrecision(3))\ndata.push(msg.battery_w)\ndata.push(msg.decisions.join(\" > \"))\ndata.push(msg.decision)\n\nmsg.payload = data.join(\"\\t\");\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2670,
    "y": 380,
    "wires": [
        ["04540541e71b25ea"]
    ]
}, {
    "id": "04540541e71b25ea",
    "type": "file",
    "z": "a22ceab4a91f8127",
    "name": "",
    "filename": "filename",
    "filenameType": "msg",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "none",
    "x": 2880,
    "y": 380,
    "wires": [
        ["48647c2c6d79945d"]
    ]
}, {
    "id": "072513d530b67f09",
    "type": "link in",
    "z": "a22ceab4a91f8127",
    "name": "Decision Logger",
    "links": ["6696e787e3440d2c", "8e740e78c6556459", "d6458d1b41a84321", "e144633243a2e77e", "347e0ae445145bab"],
    "x": 2505,
    "y": 380,
    "wires": [
        ["32d8aee4fa4fa0c0"]
    ]
}, {
    "id": "e144633243a2e77e",
    "type": "link out",
    "z": "a22ceab4a91f8127",
    "name": "link out 2",
    "mode": "link",
    "links": ["072513d530b67f09"],
    "x": 2975,
    "y": 460,
    "wires": []
}, {
    "id": "d6458d1b41a84321",
    "type": "link out",
    "z": "a22ceab4a91f8127",
    "name": "link out 3",
    "mode": "link",
    "links": ["072513d530b67f09"],
    "x": 2365,
    "y": 660,
    "wires": []
}, {
    "id": "6696e787e3440d2c",
    "type": "link out",
    "z": "a22ceab4a91f8127",
    "name": "link out 4",
    "mode": "link",
    "links": ["072513d530b67f09"],
    "x": 2195,
    "y": 420,
    "wires": []
}, {
    "id": "8e740e78c6556459",
    "type": "link out",
    "z": "a22ceab4a91f8127",
    "name": "link out 5",
    "mode": "link",
    "links": ["072513d530b67f09"],
    "x": 2045,
    "y": 380,
    "wires": []
}, {
    "id": "347e0ae445145bab",
    "type": "link out",
    "z": "a22ceab4a91f8127",
    "name": "link out 6",
    "mode": "link",
    "links": ["072513d530b67f09"],
    "x": 2385,
    "y": 300,
    "wires": []
}, {
    "id": "565eeeb7.e0f29",
    "type": "server",
    "name": "Home Assistant",
    "addon": true,
    "rejectUnauthorizedCerts": true,
    "ha_boolean": "",
    "connectionDelay": false,
    "cacheJson": false,
    "heartbeat": true,
    "heartbeatInterval": "10",
    "statusSeparator": "",
    "enableGlobalContextStore": false
}, {
    "id": "814a6af6675ecbdc",
    "type": "mqtt-broker",
    "name": "MQTT Broker",
    "broker": "localhost",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "autoUnsubscribe": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthRetain": "false",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closeRetain": "false",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willRetain": "false",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
}]